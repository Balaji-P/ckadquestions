CMs, Secrets, SAs

1. List all the configmaps in the cluster
-> kubectl get cm --all-namespaces

2. Create a configmap called myconfigmap with literal value appname=myapp
-> kubectl create cm myconfigmap \
   --from-literal=appname=myapp

3. Verify the configmap we just created has this data
-> kubectl get cm myconfigmap -oyaml

4. delete the configmap myconfigmap we just created
-> kubectl delete cm myconfigmap 

5. Create a file called config.txt with two values key1=value1 and key2=value2 and verify the file
-> cat > config.txt
   key1=value1
   key2=value2

6. Create a configmap named keyvalcfgmap and read data from the file config.txt and verify that configmap is created correctly
-> kubectl create cm keyvalcfgmap --from-file=config.txt

7. Create an nginx pod and load environment values from the above configmap keyvalcfgmap and exec into the pod and verify the environment variables and delete the pod
-> 
apiVersion: v1 
kind: Pod
metadata:
 name: nginx
spec:
 containers:
 - image: nginx
   name: nginx
   envFrom:
   - configMapRef:
      name: keyvalcfgmap

-> kubectl delete po nginx

8. Create an env file file.env with var1=val1 and create a configmap envcfgmap from this env file and verify the configmap
-> cat > file.env
  var1=value1

-> kubectl create cm envcfgmap --from-file=file.env

9. Create an nginx pod and load environment values from the above configmap envcfgmap and exec into the pod and verify the environment variables and delete the pod
-> 
apiVersion: v1 
kind: Pod
metadata:
 name: nginx
spec:
 containers:
 - image: nginx
   name: nginx
   envFrom:
   - configMapRef:
      name: envcfgmap

10. Create a configmap called cfgvolume with values var1=val1, var2=val2 and create an nginx pod with volume nginx-volume which reads data from this configmap cfgvolume and put it on the path /etc/cfg
-> kubectl create cm cfgvolume \
  --from-literal=var1=val2 \
  --from-literal=var2=val2 

-> 
====================
apiVersion: v1
kind: Pod
metadata:
 name: nginx
spec:
  volumes:
  - name: nginx-volume
    configMap:
      name: cfgvolume
  containers:
  - image: nginx
    name: nginx
    volumeMounts:
    - name: nginx-volume
      mountPath: /etc/cfg
====================

11. Create a pod called secbusybox with the image busybox which executes command sleep 3600 and makes sure any Containers in the Pod, all processes run with user ID 1000 and with group id 2000 and verify
->
apiVersion: v1
kind: Pod
metadata: 
 name: secbusybox
spec:
  securityContext:
    runAsUser: 1000
    runAsGroup: 3000
  containers:
  - image: busybox
    name: busybox
    command: 
    - sleep
    - "3600"

12. Create the same pod as above this time set the securityContext for the container as well and verify that the securityContext of container overrides the Pod level securityContext.
13. Create pod with an nginx image and configure the pod with capabilities NET_ADMIN and SYS_TIME verify the capabilities
14. Create a Pod nginx and specify a memory request and a memory limit of 100Mi and 200Mi respectively.
15. Create a Pod nginx and specify a CPU request and a CPU limit of 0.5 and 1 respectively
16. Create a Pod nginx and specify both CPU, memory requests and limits together and verify
17. Create a Pod nginx and specify a memory request and a memory limit of 100Gi and 200Gi respectively which is too big for the nodes and verify pod fails to start because of insufficient memory
18. Create a secret mysecret with values user=myuser and password=mypassword
-> kubectl create secret generic mysecret \
  --from-literal=user=myuser \
  --from-literal=password=mypassword

19. List the secrets in all namespaces
-> kubectl get secrets --all-namespaces

20. Output the yaml of the secret created above
-> kubectl get secret --all-namespaces -oyaml

21. Create an nginx pod which reads username as the environment variable
-> secretRef

22. Create an nginx pod which loads the secret as environment variables
-> secretRef

23. List all the service accounts in the default namespace
-> kubectl get sa -n default

24. List all the service accounts in all namespaces
-> kubectl get sa --all-namespaces

25. Create a service account called admin
-> kubectl create sa admin

26. Output the YAML file for the service account we just created
-> kubectl get sa admin -oyaml

27. Create a busybox pod which executes this command sleep 3600 with the service account admin and verify
-> 
apiVersion: v1
kind: Pod
metadata:
 name: busybox
spec:
 containers:
 - image: busybox
   name: busybox
   command: ["/bin/sh","-c","--"]
   args:["sleep 3600"]
 restartPolicy: Never
 serviceAccount: admin
 serviceAccountName: admin

 30. create a secret to pull images from private repository 
 -> kubectl create secret docker-registry myprivatereg \
    --docker-server=myprivatereg
    --docker-username=alice
    --docker-password=password
    --docker-email=alice@myprivatereg.com
-> image: myprivatereg/nginx:v1
-> spec.imagePullSecrets[]= name = myprivatereg
