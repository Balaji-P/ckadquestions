1. List all the namespaces in the cluster
->  kubectl get ns 

2. List all the pods in all namespaces
-> kubectl get po --all-namespaces

3. List all the pods in the particular namespace
-> kubectl get po -n default

4. List all the services in the particular namespace
-> kubectl get svc -n default

5. List all the pods showing name and namespace with a json path expression
-> kubectl get pods -o=jsonpath="{range .items[*]}{.metadata.name}{'\t'}{.metadata.namespace}{'\n'}{end}"

6. Create an nginx pod in a default namespace and verify the pod running
-> kubectl run nginx --image=nginx

7. Create the same nginx pod with a yaml file
-> ```
   apiVersion: v1
   kind: Pod
   metadata:
    name: nginx-pod
    namespace: default
   spec:
     containers:
     - image: nginx:latest
       name: nginx-container
  ```

8. Output the yaml file of the pod you just created
-> kubectl get po nginx -oyaml

9. Output the yaml file of the pod you just created without the cluster-specific information
-> 

10. Get the complete details of the pod you just created
-> kubectl get po nginx -oyaml

11. Delete the pod you just created
-> kubectl delete po nginx

12. Delete the pod you just created without any delay (force delete)
-> kubectl delete po nginx --force --grace-period=0

13. Create the nginx pod with version 1.17.4 and expose it on port 80
-> kubectl run nginx --image=nginx:1.17.4 --port=80

14. Change the Image version to 1.15-alpine for the pod you just created and verify the image version is updated
-> kubectl set image pod nginx-pod nginx-container=alpine

15. Change the Image version back to 1.17.1 for the pod you just updated and observe the changes
-> kubectl set image pod nginx-pod nginx-container=nginx:1.17.1

16. Check the Image version without the describe command
-> kubectl get po nginx -o jsonpath='{..image}


17. Create the nginx pod and execute the simple shell on the pod
-> kubectl run newpod --image=nginx  --restart=Never
-> kubectle exec -it newpod /bin/sh or sh

18. Get the IP Address of the pod you just created
-> kubectl get po newpod -owide

19. Create a busybox pod and run command ls while creating it and check the logs
-> kubectl run busybox --image=busybox --restart=Never -- ls
-> kubectl logs -f busybox

20. If pod crashed check the previous logs of the pod
-> kubectl logs busybox --previous or -p

21. Create a busybox pod with command sleep 3600
-> kubectl run busybox --image=busybox --restart=Never -- /bin/sh -c "sleep 3600"

22. Check the connection of the nginx pod from the busybox pod
-> kubectl exec -it busybox -- curl nginxIP 

23. Create a busybox pod and echo message ‘How are you’ and delete it manually
-> kubectl run busybox --image=busybox -it -- echo "how are you" 
-> kubectl delete po busybox

24. Create a busybox pod and echo message ‘How are you’ and have it deleted immediately
-> kubectl run busybox --image=busybox -it --rm -- echo "how are you" 

25. Create an nginx pod and list the pod with different levels of verbosity
-> kubectl run nginx --image=nginx 
-> kubectl logs nginx --v=2,3,4,5,6,7,8,..

26. List the nginx pod with custom columns POD_NAME and POD_STATUS
-> ubectl get po nginx -ocustom-columns=POD_NAME:metadata.name,POD_STATUS:status.phase

27. List all the pods sorted by name
-> kubectl get po --sort-by=metadata.name

28. List all the pods sorted by created timestamp
-> kubectl get po --sort-by=metadata.creationTimestamp
----- END OF PODS -----
